/*!
 * statful-client-javascript 2.1.3 
 * Copyright 2018 Statful 
 * https://www.statful.com
 */!function(e){var t={};function r(s){if(t[s])return t[s].exports;var i=t[s]={i:s,l:!1,exports:{}};return e[s].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:s})},r.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);class s{constructor(e){this.debugEnabled=e||!1}info(){this.debugEnabled&&console.info.apply(console,Array.prototype.slice.call(arguments))}debug(){this.debugEnabled&&console.debug.apply(console,Array.prototype.slice.call(arguments))}error(){this.debugEnabled&&console.error.apply(console,Array.prototype.slice.call(arguments))}}class i{constructor(e){this.config={},Object.assign(this.config,e),this.logger=new s(this.config.debug),this.config&&this.config.flushInterval&&this.registerQueue(this.config.flushInterval)}sendData(e){const t=`${this.config.apiAddress}/beacon/metrics`,r=JSON.stringify(e);if(this.config.dryrun)this.logger.debug("Dryrun data",e);else{let e=new XMLHttpRequest;e.open("POST",t,!0),e.timeout=this.config.timeout,e.setRequestHeader("Content-type","application/json"),e.send(r),e.onreadystatechange=(()=>{200==e.status||201==e.status?this.logger.debug("Successfully send metric"):this.logger.debug("Error send metric",t,e.status)})}}registerQueue(e){let t;return this.metricsQueue=[],"number"==typeof e&&e>0&&(t=setInterval(()=>{this.metricsQueue.length>0&&(this.sendData(this.metricsQueue),this.metricsQueue=[])},e),window.addEventListener("beforeunload",()=>{clearInterval(t)}),!0)}addMetric(e={},t=!0){e&&"function"==typeof e.isValid&&e.isValid()?this.shouldAddMetric(e)?t?this.metricsQueue.push(e):this.sendData([e]):this.logger.debug("Metric was discarded due to sample rate."):this.logger.error("Invalid metric.")}shouldAddMetric(e={}){const t=(e.sampleRate||this.config.sampleRate||100)/100;return Math.random()<=t}}const a=["avg","count","sum","first","last","p90","p95","min","max"],n=[10,30,60,120,180,300];class g{constructor(e="",t="",r="",s={},i={}){this.name=e,this.type=t,this.value=r;let a=[],n=[],g=0;i[t]&&(a=i[t].tags,n=i[t].aggregations,g=i[t].aggregationFrequency),this.tags=this.buildTags(s.tags,i.tags,a,i.app),this.aggregations=this.buildAggregations(s.aggregations,i.aggregations,n),this.aggregationFrequency=this.buildAggregationFrequency(s.aggregationFrequency,i.aggregationFrequency,g),this.namespace=s.namespace||i.namespace,this.sampleRate=s.sampleRate||i.sampleRate}buildTags(e={},t={},r={},s){let i={};return Object.assign(i,t),Object.assign(i,r),Object.assign(i,e),!i.app&&s&&(i.app=s),i}buildAggregations(e=[],t=[],r=[]){let s=[];return s=(s=(s=s.concat(t)).concat(r).filter(this.uniq)).concat(e).filter(this.uniq),this.filterAggregations(s)}uniq(e,t,r){return e&&r.indexOf(e)===t}buildAggregationFrequency(e,t,r){let s=e||r||t;return this.filterAggregationFrequency(s)}filterAggregations(e=[]){return e.filter(e=>a.includes(e))}filterAggregationFrequency(e){return n.includes(e)?e:10}isValid(){return!(isNaN(this.value)||!this.name)}}r.d(t,"default",function(){return c});const o={dryrun:!1,debug:!1,app:void 0,namespace:"web",tags:{},aggregations:[],aggregationFrequency:10,timer:{tags:{unit:"ms"},aggregations:["avg","p90","count"]},counter:{tags:{},aggregations:["sum","count"]},gauge:{tags:{},aggregations:["last"]},timeout:2e3,flushInterval:1e4,sampleRate:100};class c{static initialize(e){this.config={apiAddress:"https://beacon.statful.com"},"object"==typeof e&&null!==e||(e={}),Object.assign(this.config,o),Object.assign(this.config,e),this.logger=new s(this.config.debug),this.util=new i(this.config);const t=document.createElement("link");t.rel="preconnect",t.href=this.config.apiAddress,document.getElementsByTagName("head")[0].appendChild(t)}static measureTimeUserTiming(e=""){const t=window.performance.getEntriesByName(e).filter(e=>"measure"===e.entryType);let r;return t.length>0?r=t[t.length-1].duration:this.logger.debug(`Measure ${e} not found`),r}static clearMarks(e){try{Array.isArray(e)?e.forEach(e=>{e&&window.performance.clearMarks(e)}):window.performance.clearMarks()}catch(e){this.logger.error(e)}}static clearMeasures(e){try{Array.isArray(e)?e.forEach(e=>{e&&window.performance.clearMeasures(e)}):window.performance.clearMeasures()}catch(e){this.logger.error(e)}}static registerMark(e=""){try{this.logger.debug("Register Mark",e),e?window.performance.mark(e):this.logger.error("Undefined resource name to register as a mark")}catch(e){this.logger.error(e)}}static registerMeasure(e,t,r={}){try{if(this.logger.debug("Register Measure",e,t,r),e){let s={clearMarks:!1,clearMeasures:!1};Object.assign(s,r),s.endMark||(this.registerMark(e),s.endMark=e),window.performance.measure(e,s.startMark,s.endMark);let i=this.measureTimeUserTiming(e);if(i){let e=new g(t,"timer",i,s,this.config);this.util.addMetric(e,!0)}else this.logger.error("Failed to get measure time to register as timer value");s.clearMarks&&this.clearMarks([s.startMark,s.endMark]),s.clearMeasures&&this.clearMeasures([e])}else this.logger.error("Undefined resource name to register as a measure")}catch(e){this.logger.error(e)}}static timer(e,t,r={}){this.logger.debug("Register Timer",e,t,r);let s=new g(e,"timer",t,r,this.config);this.util.addMetric(s,!0)}static counter(e,t=1,r={}){this.logger.debug("Register Counter",e,r);let s=new g(e,"counter",t,r,this.config);s.value=Math.abs(parseInt(s.value,10)),this.util.addMetric(s,!0)}static gauge(e,t,r={}){this.logger.debug("Register Gauge",e,t,r);let s=new g(e,"gauge",t,r,this.config);this.util.addMetric(s,!0)}static sendMetric(e,t,r,s={}){let i=new g(t,e,r,s,this.config);this.util.addMetric(i,!1)}}}]);